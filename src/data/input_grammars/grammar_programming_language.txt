<programa> ::= <declaracoes> <comandos> . 
<declaracoes> ::= <dcl_const> <dcl_var> <dcl_procs> 
<dcl_const> ::= const <tipo_pre_def> id = <constante> ; <dcl_const>
<dcl_const> ::= &
<dcl_var> ::= var <lid> : <tipo> ; <dcl_var> 
<dcl_var> ::= &
<dcl_procs> ::= <dcl_proc> ; <dcl_procs> 
<dcl_procs> ::= & 
<dcl_proc> ::= proc id <parametros> ; <declaracoes> <comandos>
<dcl_proc> ::= funcao id <parametros> : <tipo_pre_def> ; <declaracoes> <comandos>
<parametros> ::= ( <listapar> ) 
<parametros> ::= &
<listapar> ::= ref <lid> : <tipo_pre_def> <rep_listapar>
<listapar> ::= val <lid> : <tipo_pre_def> <rep_listapar> 
<rep_listapar> ::= ; <listapar> 
<rep_listapar> ::= & 
<lid> ::= id <rep_id> 
<rep_id> ::= , id <rep_id> 
<rep_id> ::= &
<constante> ::= id 
<constante> ::= <constante_explicita> 
<tipo> ::= <tipo_pre_def>
<tipo> ::= intervalo <constante> .. <constante>
<tipo> ::= cadeia [ <constante> ]
<tipo> ::= vetor [ <constante> ] de <tipo_pre_def> 
<tipo_pre_def> ::= inteiro | real | booleano | caracter 
<comandos> ::= inicio <comando> <rep_comando> fim 
<rep_comando> ::= ; <comando> <rep_comando> 
<rep_comando> ::= &
<comando> ::= id <rcomid>
<comando> ::= inicio <comando> <rep_comando> fim
<comando> ::= se <expressao> entao <comando> <senaoparte>
<comando> ::= enquanto <expressao> faca <comando>
<comando> ::= repita <comando> ate <expressao>
<comando> ::= leia ( <lid> )
<comando> ::= escreva ( <expressao> <rep_expressao> ) 
<comando> ::= &
<senaoparte> ::= senao <comando> 
<senaoparte> ::= &
<rcomid> ::= := <expressao>
<rcomid> ::= [ <expressao> ] := <expressao>
<rcomid> ::= ( <expressao> <rep_expressao> ) 
<rcomid> ::= &
<rep_expressao> ::= , <expressao> <rep_expressao> 
<rep_expressao> ::= &
<expressao> ::= <expsimp> <resto_expressao> 
<resto_expressao> ::= <oprel> <expsimp> 
<resto_expressao> ::= &
<oprel> ::= = 
<oprel> ::= < 
<oprel> ::= > 
<oprel> ::= >= 
<oprel> ::= <= 
<oprel> ::= <> 
<expsimp> ::= <termo> <rep_expsimp> 
<rep_expsimp> ::= <op_add> <termo> <rep_expsimp> 
<rep_expsimp> ::= & 
<op_add> ::= + 
<op_add> ::= - 
<op_add> ::= ou 
<termo> ::= <fator> <rep_termo> 
<rep_termo> ::= <op_mult> <fator> <rep_termo> 
<rep_termo> ::= &
<op_mult> ::= * 
<op_mult> ::= / 
<op_mult> ::= e 
<fator> ::= nao <fator> 
<fator> ::= - <fator> 
<fator> ::= ( <expressao> )
<fator> ::=  <variavel> 
<fator> ::= <constante_explicita> 
<variavel> ::= id <rvar> 
<rvar> ::= ( <expressao> <rep_expressao> )
<rvar> ::= [ <expressao> ] 
<rvar> ::= & 
<constante_explicita> ::= num_int 
<constante_explicita> ::= num_real 
<constante_explicita> ::= falso 
<constante_explicita> ::= verdadeiro 
<constante_explicita> ::= literal 