if: if
else: else
while: while
for: for
return: return
int: int
float: float
string: string
bool: bool
true: true
false: false
plus: \+
minus: \-
mult: \*
div: / 
eq: ==
neq: !=
lt: \<
gt: \>
leq: \<=
geq: \>=
or: \|\|
not: !
assign: =
lparen: \(
rparen: \)
lbrace: \{
rbrace: \}
lbracket: \[
rbracket: \]
semicolon: ;
comma: ,
dot: \.
number: [0-9]+(\.[0-9]+)?
expr: <number><plus><number> | <number><minus><number> | <number><mult><number> | <number><div><number>
string_literal: "[A-Za-z0-9Çç\s_]*"
char_literal: '[A-Za-z0-9Çç]'
identifier: [a-zA-Z_][a-zA-Z0-9_]*
comment: \/\/[A-Za-z0-9]*